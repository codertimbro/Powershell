import requests
from bs4 import BeautifulSoup
from feedgen.feed import FeedGenerator
import datetime

# Function to scrape analyst ratings from Benzinga
def scrape_analyst_ratings(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.content, 'html.parser')
    
    # Example extraction logic (depends on the specific website structure)
    analyst_ratings = []
    articles = soup.find_all('article')  # Adjust this according to the website structure
    
    for article in articles:
        title = article.find('h2').get_text()
        link = article.find('a')['href']
        description = article.find('p').get_text()
        pub_date = datetime.datetime.now()  # Placeholder, use actual date if available
        
        analyst_ratings.append({
            'title': title,
            'link': link,
            'description': description,
            'pub_date': pub_date
        })
    
    return analyst_ratings

# Function to generate RSS feed
def generate_rss_feed(analyst_ratings, output_file='analyst_ratings.xml'):
    fg = FeedGenerator()
    fg.title('Benzinga Analyst Ratings')
    fg.link(href='https://www.benzinga.com', rel='alternate')
    fg.description('RSS feed for Benzinga analyst ratings')
    fg.language('en')
    
    for rating in analyst_ratings:
        fe = fg.add_entry()
        fe.title(rating['title'])
        fe.link(href=rating['link'])
        fe.description(rating['description'])
        fe.pubDate(rating['pub_date'])
    
    fg.rss_file(output_file)

# Example usage
url = 'https://www.benzinga.com/analyst-ratings'  # Replace with actual URL
analyst_ratings = scrape_analyst_ratings(url)
generate_rss_feed(analyst_ratings)
