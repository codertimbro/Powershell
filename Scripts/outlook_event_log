# Outlook Remote Diagnostic Script
# This script collects diagnostic information from a remote computer to help troubleshoot Outlook freezing issues
# Run this script as an administrator with appropriate permissions

param(
    [Parameter(Mandatory=$true)]
    [string]$ComputerName
    # No credential parameter as you're already logged in with admin privileges
)

# Create a timestamp for log files
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$localLogDir = "$env:USERPROFILE\Desktop\OutlookDiagnostics-$ComputerName-$timestamp"
$remoteLogDir = "C:\temp\OutlookDiagnostics-$timestamp"
$logFile = "$localLogDir\OutlookDiagnostics.log"

# Create the local log directory
New-Item -ItemType Directory -Path $localLogDir -Force | Out-Null

# Start logging
Start-Transcript -Path $logFile -Append

function Write-Log {
    param (
        [string]$Message,
        [string]$Type = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp [$Type] - $Message" | Out-File -FilePath $logFile -Append
    Write-Host "$timestamp [$Type] - $Message"
}

Write-Log "Starting Outlook diagnostic collection for remote computer: $ComputerName"

# Try to establish a remote session
try {
    Write-Log "Establishing remote PowerShell session to $ComputerName..."
    $session = New-PSSession -ComputerName $ComputerName -ErrorAction Stop
    
    # Create remote temporary directory
    Invoke-Command -Session $session -ScriptBlock {
        if (-not (Test-Path "C:\temp")) {
            New-Item -ItemType Directory -Path "C:\temp" -Force | Out-Null
        }
        New-Item -ItemType Directory -Path $using:remoteLogDir -Force | Out-Null
    }
    
    Write-Log "Remote session established successfully"
} catch {
    Write-Log "Failed to establish remote session: $($_.Exception.Message)" "ERROR"
    Write-Log "Please ensure the remote computer is online and WinRM is properly configured" "ERROR"
    Write-Log "You may need to run: Enable-PSRemoting -Force on the remote machine" "ERROR"
    Stop-Transcript
    return
}

# Check if Outlook is running on remote machine
Write-Log "Checking Outlook process on $ComputerName..."
$outlookProcess = Invoke-Command -Session $session -ScriptBlock {
    Get-Process -Name "OUTLOOK" -ErrorAction SilentlyContinue
}

if ($outlookProcess) {
    Write-Log "Outlook is currently running on $ComputerName (PID: $($outlookProcess.Id))"
} else {
    Write-Log "Outlook is not currently running on $ComputerName" "WARNING"
}

# Check Outlook version on remote machine
Write-Log "Checking Outlook version information..."
$remoteOutlookVersion = Invoke-Command -Session $session -ScriptBlock {
    $outlookVersions = @()
    $regPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Office\ClickToRun\Configuration",
        "HKLM:\SOFTWARE\Microsoft\Office\16.0\Outlook\InstallRoot",
        "HKLM:\SOFTWARE\Microsoft\Office\15.0\Outlook\InstallRoot"
    )

    foreach ($path in $regPaths) {
        if (Test-Path $path) {
            try {
                $version = Get-ItemProperty -Path $path -ErrorAction SilentlyContinue
                $outlookVersions += $version
            } catch {
                # Silently continue if registry path cannot be accessed
            }
        }
    }

    # Save version info to remote file
    if ($outlookVersions.Count -gt 0) {
        try {
            $outlookVersions | Format-List | Out-File -FilePath "$using:remoteLogDir\OutlookVersion.txt" -ErrorAction Stop
            Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" -ErrorAction SilentlyContinue | 
                Out-File -FilePath "$using:remoteLogDir\OfficeVersion.txt" -Append -ErrorAction Stop
            return $true
        } catch {
            Write-Output "Warning: Could not write Outlook version information to file: $($_.Exception.Message)" | 
                Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append
            return $false
        }
    } else {
        return $false
    }
}

if ($remoteOutlookVersion) {
    Write-Log "Outlook version information collected"
} else {
    Write-Log "Could not determine Outlook version on $ComputerName" "WARNING"
}

# Check for Outlook add-ins on remote machine
Write-Log "Checking for Outlook add-ins..."
Invoke-Command -Session $session -ScriptBlock {
    $addinLogs = "$using:remoteLogDir\OutlookAddins.txt"

    $addinPaths = @(
        "HKCU:\Software\Microsoft\Office\Outlook\Addins",
        "HKLM:\Software\Microsoft\Office\Outlook\Addins",
        "HKCU:\Software\Microsoft\Office\16.0\Outlook\Addins",
        "HKLM:\Software\Microsoft\Office\16.0\Outlook\Addins",
        "HKCU:\Software\Microsoft\Office\15.0\Outlook\Addins",
        "HKLM:\Software\Microsoft\Office\15.0\Outlook\Addins"
    )

    foreach ($path in $addinPaths) {
        if (Test-Path $path) {
            try {
                "Checking add-ins in: $path" | Out-File -FilePath $addinLogs -Append -ErrorAction Stop
                $addins = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
                if ($addins) {
                    foreach ($addin in $addins) {
                        try {
                            $addinName = $addin.PSChildName
                            $addinDetails = Get-ItemProperty -Path $addin.PSPath -ErrorAction Stop
                            "Add-in: $addinName" | Out-File -FilePath $addinLogs -Append -ErrorAction Stop
                            $addinDetails | Format-List | Out-File -FilePath $addinLogs -Append -ErrorAction Stop
                            "LoadBehavior: $(if ($addinDetails.LoadBehavior -eq 3) { 'Loaded at startup (3)' } else { $addinDetails.LoadBehavior })" | 
                                Out-File -FilePath $addinLogs -Append -ErrorAction Stop
                            "-------------------------------" | Out-File -FilePath $addinLogs -Append -ErrorAction Stop
                        } catch {
                            "Error reading details for add-in $($addin.PSChildName): $($_.Exception.Message)" | 
                                Out-File -FilePath $addinLogs -Append -ErrorAction SilentlyContinue
                        }
                    }
                }
            } catch {
                "Error accessing add-in path $path: $($_.Exception.Message)" | 
                    Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
            }
        }
    }
}

# Check for crashed Outlook processes or hanging instances
Write-Log "Checking for hung or crashed Outlook processes..."
Invoke-Command -Session $session -ScriptBlock {
    try {
        Get-WinEvent -LogName "Application" -MaxEvents 100 -ErrorAction Stop | Where-Object { 
            $_.Message -like "*outlook*" -and ($_.LevelDisplayName -eq "Error" -or $_.LevelDisplayName -eq "Warning") 
        } | Format-List | Out-File -FilePath "$using:remoteLogDir\OutlookEventLogs.txt" -ErrorAction Stop
    } catch {
        "Error retrieving Outlook-related event logs: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Check system resources on remote machine
Write-Log "Checking system resources on $ComputerName..."
Invoke-Command -Session $session -ScriptBlock {
    # Create error file if it doesn't exist
    if (-not (Test-Path "$using:remoteLogDir\Errors.txt")) {
        New-Item -ItemType File -Path "$using:remoteLogDir\Errors.txt" -Force | Out-Null
    }

    # Check disk space
    try {
        Get-WmiObject Win32_LogicalDisk | Where-Object { $_.DriveType -eq 3 } | 
            Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}, @{Name="PercentFree";Expression={[math]::Round(($_.FreeSpace/$_.Size)*100,2)}} | 
            Format-Table | Out-File -FilePath "$using:remoteLogDir\DiskSpace.txt" -ErrorAction Stop
    } catch {
        "Error retrieving disk space information: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append
    }

    # Check memory
    try {
        Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum | 
            Select-Object @{Name="TotalRAM(GB)";Expression={[math]::Round($_.Sum/1GB,2)}} | 
            Format-Table | Out-File -FilePath "$using:remoteLogDir\Memory.txt" -Append -ErrorAction Stop
    } catch {
        "Error retrieving memory information: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append
    }
    
    # Get processor info
    try {
        Get-CimInstance Win32_Processor | Select-Object Name, NumberOfCores, MaxClockSpeed, CurrentClockSpeed |
            Format-Table | Out-File -FilePath "$using:remoteLogDir\Processor.txt" -ErrorAction Stop
    } catch {
        "Error retrieving processor information: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append
    }
}

# Check for each Outlook user profile on the remote machine
Write-Log "Checking Outlook user profiles..."
Invoke-Command -Session $session -ScriptBlock {
    # Find all user profiles on the system
    try {
        $userProfiles = Get-ChildItem -Path "C:\Users" -Directory -ErrorAction Stop
        
        foreach ($userProfile in $userProfiles) {
            $outlookPath = Join-Path -Path $userProfile.FullName -ChildPath "AppData\Local\Microsoft\Outlook"
            
            if (Test-Path $outlookPath) {
                # Create directory for data file info if it doesn't exist
                if (-not (Test-Path "$using:remoteLogDir\OutlookDataFiles.txt")) {
                    New-Item -ItemType File -Path "$using:remoteLogDir\OutlookDataFiles.txt" -Force | Out-Null
                }

                # Check for Outlook data files
                try {
                    $pstFiles = Get-ChildItem -Path $outlookPath -Filter "*.pst" -ErrorAction SilentlyContinue
                    $ostFiles = Get-ChildItem -Path $outlookPath -Filter "*.ost" -ErrorAction SilentlyContinue
                    
                    if ($pstFiles -or $ostFiles) {
                        "User Profile: $($userProfile.Name)" | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                        
                        "PST Files:" | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                        foreach ($pstFile in $pstFiles) {
                            try {
                                $fileInfo = $pstFile | Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}}, LastWriteTime, FullName
                                $fileInfo | Format-Table -AutoSize | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                            } catch {
                                "Error accessing PST file $($pstFile.Name): $($_.Exception.Message)" | 
                                    Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction SilentlyContinue
                            }
                        }
                        
                        "OST Files:" | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                        foreach ($ostFile in $ostFiles) {
                            try {
                                $fileInfo = $ostFile | Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}}, LastWriteTime, FullName
                                $fileInfo | Format-Table -AutoSize | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                            } catch {
                                "Error accessing OST file $($ostFile.Name): $($_.Exception.Message) (likely in use by Outlook)" | 
                                    Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction SilentlyContinue
                            }
                        }
                        
                        "----------------------------------------" | Out-File -FilePath "$using:remoteLogDir\OutlookDataFiles.txt" -Append -ErrorAction Stop
                    }
                } catch {
                    "Error accessing Outlook data files for user $($userProfile.Name): $($_.Exception.Message)" | 
                        Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
                }
            }
        }
    } catch {
        "Error accessing user profiles: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Check notification related issues
Write-Log "Checking notification related issues..."
Invoke-Command -Session $session -ScriptBlock {
    # Check Windows notification settings
    try {
        Get-WinEvent -LogName "Microsoft-Windows-Shell-Core/Operational" -MaxEvents 50 -ErrorAction Stop | 
            Where-Object { $_.Message -like "*notification*" -or $_.Message -like "*shell*" } | 
            Format-List | Out-File -FilePath "$using:remoteLogDir\NotificationLogs.txt" -ErrorAction Stop
    } catch {
        "Error accessing notification logs: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Check for performance issues when Outlook is running
if ($outlookProcess) {
    Write-Log "Collecting performance data for running Outlook process on $ComputerName..."
    Invoke-Command -Session $session -ScriptBlock {
        try {
            Get-Counter -Counter "\Process(outlook*)\% Processor Time", "\Process(outlook*)\Working Set", "\Process(outlook*)\Thread Count" -MaxSamples 5 -ErrorAction Stop | 
                Format-List | Out-File -FilePath "$using:remoteLogDir\OutlookPerformance.txt" -ErrorAction Stop
        } catch {
            "Error collecting Outlook performance data: $($_.Exception.Message)" | 
                Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
        }
    }
}

# Check for Windows Updates that might affect Outlook
Write-Log "Checking recent Windows Updates..."
Invoke-Command -Session $session -ScriptBlock {
    try {
        Get-HotFix | Sort-Object -Property InstalledOn -Descending | Select-Object -First 20 | 
            Format-Table -AutoSize | Out-File -FilePath "$using:remoteLogDir\RecentUpdates.txt" -ErrorAction Stop
    } catch {
        "Error checking recent Windows updates: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Generate diagnostic report for send/receive operations
Write-Log "Checking Outlook send/receive logs..."
Invoke-Command -Session $session -ScriptBlock {
    # Try to find send/receive logs for all user profiles
    try {
        $userProfiles = Get-ChildItem -Path "C:\Users" -Directory -ErrorAction Stop
        
        foreach ($userProfile in $userProfiles) {
            $sendReceiveLogs = Join-Path -Path $userProfile.FullName -ChildPath "AppData\Local\Temp\Outlook Logging"
            
            if (Test-Path $sendReceiveLogs) {
                $userLogDir = "$using:remoteLogDir\SendReceiveLogs\$($userProfile.Name)"
                try {
                    New-Item -ItemType Directory -Path $userLogDir -Force -ErrorAction Stop | Out-Null
                    
                    # Copy the most recent log files (last 10 days)
                    $recentLogs = Get-ChildItem -Path $sendReceiveLogs -File -Recurse -ErrorAction SilentlyContinue | 
                        Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays(-10) }
                    
                    foreach ($logFile in $recentLogs) {
                        try {
                            $destPath = $logFile.FullName.Replace($sendReceiveLogs, $userLogDir)
                            $destDir = Split-Path -Path $destPath -Parent
                            
                            if (-not (Test-Path $destDir)) {
                                New-Item -ItemType Directory -Path $destDir -Force -ErrorAction Stop | Out-Null
                            }
                            
                            Copy-Item -Path $logFile.FullName -Destination $destPath -Force -ErrorAction Stop
                        } catch {
                            "Error copying log file $($logFile.FullName): $($_.Exception.Message)" | 
                                Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
                        }
                    }
                } catch {
                    "Error creating directory or accessing send/receive logs for user $($userProfile.Name): $($_.Exception.Message)" | 
                        Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
                }
            }
        }
    } catch {
        "Error accessing user profiles for send/receive logs: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Generate recommendations
Write-Log "Generating recommendations..."
$recommendationsText = @"
Outlook Freezing Troubleshooting Recommendations:

1. Notification Related Issues:
   - Check Windows notification settings for Outlook
   - Try disabling Outlook desktop notifications temporarily (File > Options > Mail > Message arrival)
   - Update Windows to ensure notification system is not affected by known bugs

2. Add-in Related Issues:
   - Start Outlook in Safe Mode (hold CTRL while starting Outlook) to see if the issue persists
   - If issue is resolved in Safe Mode, disable add-ins one by one to identify the problematic one
   - Common problematic add-ins: Antivirus scanners, Meeting plugins, Social connectors

3. Data File Issues:
   - Large PST/OST files (>10GB) can cause performance problems 
   - Use "Mailbox Cleanup" to reduce size or archive older items
   - Check for data file corruption using Scanpst.exe

4. Performance Issues:
   - Check system resources (RAM, CPU, Disk space)
   - Close other applications to free up resources
   - Consider hardware upgrades if system is consistently at capacity

5. Outlook Cache Issues:
   - In Safe Mode, go to Control Panel > Mail > Email Accounts > Data Files
   - Note location of OST file, close Outlook, and rename the OST file
   - Restart Outlook to rebuild the OST file (will download from server)

6. Network Related Issues:
   - Test network connection stability and speed
   - Check for VPN issues if applicable
   - Verify Exchange server connection is stable

7. Specific to Email Notifications Issues:
   - Check Windows notification center settings
   - Try resetting the notification system: Get-Process RuntimeBroker | Restart-Service
   - Verify Desktop Alert settings in Outlook (Duration and transparency)

8. Navigation Freezes:
   - Try reducing the number of items per folder using AutoArchive
   - Disable RSS feeds and social connector if enabled
   - Try switching to Offline mode temporarily to test if it's a server synchronization issue

9. Files In Use Issues:
   - If you encounter "file in use" errors during diagnostics, it usually means Outlook or another process has locked a file
   - Close Outlook completely and check for any OUTLOOK.EXE processes in Task Manager before running diagnostics
   - For persistent issues, rebooting the computer before running diagnostics may help
   - Some diagnostics may be incomplete due to file access issues, but the script will continue and collect all available information
"@

Invoke-Command -Session $session -ScriptBlock {
    try {
        $using:recommendationsText | Out-File -FilePath "$using:remoteLogDir\Recommendations.txt" -ErrorAction Stop
    } catch {
        "Error writing recommendations: $($_.Exception.Message)" | 
            Out-File -FilePath "$using:remoteLogDir\Errors.txt" -Append -ErrorAction SilentlyContinue
    }
}

# Copy all diagnostic information from remote computer to local
Write-Log "Copying diagnostic information from $ComputerName to local computer..."
try {
    Copy-Item -Path "$remoteLogDir\*" -Destination $localLogDir -FromSession $session -Recurse -Force -ErrorAction Stop
    Write-Log "Successfully copied diagnostic information to $localLogDir"
} catch {
    Write-Log "Error copying diagnostic information: $($_.Exception.Message)" "ERROR"
    Write-Log "Attempting to copy files individually..." "WARNING"
    
    # Try to list all files in the remote directory
    $remoteFiles = Invoke-Command -Session $session -ScriptBlock {
        Get-ChildItem -Path $using:remoteLogDir -Recurse -ErrorAction SilentlyContinue
    }
    
    # Try to copy each file individually
    foreach ($file in $remoteFiles) {
        try {
            $remotePath = "$remoteLogDir\$($file.Name)"
            Copy-Item -Path $remotePath -Destination $localLogDir -FromSession $session -Force -ErrorAction Stop
            Write-Log "Copied file: $($file.Name)" "INFO"
        } catch {
            Write-Log "Failed to copy file $($file.Name): $($_.Exception.Message)" "ERROR"
        }
    }
}

# Clean up remote temporary directory
Write-Log "Cleaning up temporary files on $ComputerName..."
Invoke-Command -Session $session -ScriptBlock {
    try {
        Remove-Item -Path $using:remoteLogDir -Recurse -Force -ErrorAction Stop
    } catch {
        Write-Output "Warning: Could not remove temporary directory: $($_.Exception.Message)"
    }
}

# Close remote session
Write-Log "Closing remote session to $ComputerName..."
Remove-PSSession -Session $session

Write-Log "Diagnostic collection completed. Results are saved to: $localLogDir"
Write-Log "Please check the diagnostic files for potential causes of Outlook freezing"

Stop-Transcript

Write-Host ""
Write-Host "================================================================================" -ForegroundColor Green
Write-Host "Diagnostic information has been collected and saved to: $localLogDir" -ForegroundColor Green  
Write-Host "Please review these files to identify potential causes of Outlook freezing issues" -ForegroundColor Green
Write-Host "Even if some 'file in use' errors occurred, partial diagnostic information was collected" -ForegroundColor Yellow
Write-Host "================================================================================" -ForegroundColor Green
